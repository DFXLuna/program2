%{
    #include<iostream>
    #include<string>
    #include"messenger.hpp"
    using namespace std;
    extern Messenger* messenger;
    int col = 1;
    int err = 0;
    int errCol = 0;
    int currentErrors = 0; // Used to stacked single character errors
    string errString;
    const string keywords[11] = {"int", "void", "class", "new", "print", 
                             "read", "return", "while", "if", "else", "this"};
    // NOTES:
    // Return values <= 90 are diagnostic values ignored by main program.
%}
%option outfile ="program2_lex.cpp"
%option noyywrap
%option yylineno

%x ERROR
%x MCOMMENT

WS      [ \t]+
WORD    [_a-zA-Z][_a-zA-Z0-9]*
NUMBER  [0-9]+
ONEOP   [\[\]\{\}<>!+\-*/%;,()=.]
TWOOP   "!="|"=="|"<="|">="|"&&"|"||"
OP      {ONEOP}|{TWOOP}
COMMENT "//".*

%%



{WS} {
    col += yyleng;
    return 99;
}

"/*" {
    BEGIN(MCOMMENT);
    return 98;
}

{COMMENT} {
    col += yyleng;
    return 97;
}

"\n" {
    col = 1;
    return 96;
}

{WORD} {
    messenger->set(
        yylineno,
        col,
        yytext,
        IDENTIFIER
    );
    messenger->isKeyword();
    col += yyleng;
    return 1;
}

{NUMBER} {
    messenger->set(
        yylineno,
        col,
        yytext,
        NUMBER
    );
    col += yyleng;
    return 2;
}

{OP} {
    messenger->set(
        yylineno,
        col,
        yytext,
        OPERATOR
    );
    col += yyleng;
    return 3;
}

. {
    BEGIN(ERROR);
    // Clear error string and set error column
    errString.clear();
    errCol = col;
    currentErrors = 0;
    yyless(0);
    return 90;
}


<ERROR>{OP}|{WS}|"\n" {
    // error concluded
    // Let regular states handle this
    yyless(0);
    messenger->set(
        yylineno,
        errCol,
        errString,
        ERR
    );
    col += yyleng;
    BEGIN(INITIAL);
    return 62;
}

<ERROR>{WORD} {
    // error concluded
    // Remove it and return to normal
    // This will register two errors in strings of the form ERRwordERR
    // But the instructions are vague enough to allow that.
    errString.append(yytext);
    messenger->set(
        yylineno,
        errCol,
        errString,
        ERR
    );
    col += yyleng;
    BEGIN(INITIAL);
    return 61;
}

<ERROR>. {
    err++;
    currentErrors++;
    
    // This kinda sucks but it makes the rest of the code simpler
    // Put the second error back and reparse
    if(currentErrors == 2){
        yyless(0);
        messenger->set(
            yylineno,
            errCol,
            errString,
            ERR
        );
        BEGIN(INITIAL);
    }
    else{ 
        errString.append(yytext);
    }
    if(err > 20){ 
        cout << "Too many errors" << endl;    
        return -1;
    }
    col += yyleng;
    return 60;
}

<MCOMMENT>[^*\n]* { 
    /* Removes anything not a '*' */
    col += yyleng;
    return 196;
}

<MCOMMENT>"*"+[^*/\n]* {
    /* Removes '*'s no followed by '/'s */
    col += yyleng;
    return 197;
}

<MCOMMENT>"\n" {
    col = 1;
    return 198;
}

<MCOMMENT>"*"+"/" {
    BEGIN(INITIAL);
    col += yyleng;
    return 199;
}


%%